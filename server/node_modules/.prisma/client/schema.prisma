generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  transactions  Transaction[]            @relation("UserTransactions")
  devices       Device[]
  loginActivity LoginActivity[]
  beneficiaries Beneficiary[]
  payees        Payee[]
  cards         Card[]
  loans         Loan[]
  notifications Notification[]
  preferences   NotificationPreferences?

  twoFactorEnabled Boolean @default(false)
}

model Account {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  accountType      String
  accountNumber    String   @unique
  balance          Float    @default(0)
  availableBalance Float    @default(0)
  status           String   @default("active")
  createdAt        DateTime @default(now())

  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
  user        User     @relation("UserTransactions", fields: [userId], references: [id])
  userId      String
  date        DateTime @default(now())
  description String
  amount      Float
  type        String // debit or credit
}

model Beneficiary {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  name          String
  bank          String?
  accountNumber String
  type          String // internal | within_bank | international
}

model Payee {
  id            String @id @default(cuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  name          String
  category      String
  accountNumber String
}

model Card {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  type   String // debit | credit
  number String
  status String // active | blocked
  limit  Float  @default(0)
}

model Loan {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  loanType           String
  principalAmount    Float
  outstandingBalance Float
  interestRate       Float
  termMonths         Int
  monthlyPayment     Float
  nextPaymentDate    DateTime
  status             String
  createdAt          DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Device {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  name         String
  lastActiveAt DateTime @default(now())
}

model LoginActivity {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  timestamp DateTime @default(now())
  ip        String
  userAgent String
  status    String // success | failed
}

model NotificationPreferences {
  id                 String  @id @default(cuid())
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique
  txEmail            Boolean @default(true)
  txSMS              Boolean @default(false)
  txPush             Boolean @default(true)
  billRemindersEmail Boolean @default(true)
  marketingEmail     Boolean @default(false)
}
